datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  username  String?
  email     String?   @unique
  createdAt DateTime @default(now())
}


model Category {
  id                  String   @id @default(cuid())
  name                String
  categoryType        String
  allowedRoles        String[] @default([])
  isVisible           Boolean  @default(true)
  trackingActive      Boolean  @default(false)   
  sendSetup           Boolean  @default(false)
  lastUsage           DateTime?
  totalSecondsInCateg Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt
  zones               Zone[]
  discordCategoryId   String?
  deletedInDiscord    Boolean  @default(false)
  mainRoleId          String?
  setupChannels       SetupChannels[]
  dynamicVoiceChannels DynamicVoiceChannel[]
}



model Zone {
  id              String   @id @default(cuid())
  zoneKey         String   @unique        // NICHT löschen: Bot nutzt es
  zoneName        String
  minutesRequired Int      @default(60)
  pointsGranted   Int      @default(1)
  lastUsage           DateTime?
  totalSecondsInZone  Int      @default(0)
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  userStats  UserZoneStats[]
  voiceChannels   VoiceChannel[]
  deletedInDiscord Boolean  @default(false)
  dynamicVoiceChannels DynamicVoiceChannel[]
}



model SetupChannels {
  id              String   @id @default(cuid())
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  textChannelId   String?      // Discord-ID des gesperrten Textkanals
  voiceChannelId  String?      // Discord-ID des Warte-Voice-Kanals
  setupRoleId     String?      // Discord-ID der dynamischen Rolle
  embedMessageId  String?      // Falls du die ID der Embed-Nachricht brauchst
  createdAt       DateTime @default(now())
}

model DynamicVoiceChannel {
  id               String   @id @default(cuid())
  discordChannelId String?  @unique
  discordRoleId    String?
  zoneId           String?
  zone             Zone? @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  categoryId       String?
  category         Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  customName       String?
  locked           Boolean  @default(false)
  maxUsers         Int?
  allowedUsers     String[] @default([])
  blockedUsers     String[] @default([])
  deletedInDiscord Boolean  @default(false)
  createdByUser    String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
}


model VoiceChannel {
  id              String   @id @default(cuid())
  discordChannelId String? @unique
  zoneId          String?
  zone            Zone? @relation(fields: [zoneId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  deletedInDiscord Boolean  @default(false)
}

model UserTracking {
  id             String   @id @default(cuid())
  userId         String   @unique
  isTracked      Boolean  @default(false)
  createdAt      DateTime @default(now())
}

model RoleConfig {
  id        String  @id @default(cuid())
  roleKey   String
  roleId    String
  createdAt DateTime @default(now())

  @@unique([roleKey], map: "unique_roleKey")
}

model AdminSettings {
  id                  String   @id @default(cuid())
  voiceCategoryId     String?  // neu: optional, speichert CategoryChannel-ID
  // ... 
}

// ========================================
// UserZoneStats: zoneKey + NEU: zoneId
// ========================================
model UserZoneStats {
  id                 String   @id @default(cuid())
  userId             String
  zoneKey            String
  zoneId             String?
  zone               Zone? @relation(fields: [zoneId], references: [id])
  totalSecondsInZone Int      @default(0)
  leftoverSeconds    Int      @default(0)
  pointsInThisZone   Int      @default(0)
  lastJoinTimestamp  DateTime?
  lastUsage          DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
}




model UserGlobalStats {
  id                  String   @id @default(cuid())
  userId              String   @unique
  isTracked           Boolean  @default(false)
  totalPoints         Int      @default(0)
  totalTimeInAllZones Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt
}


model WizardSession {
  id          String   @id @default(cuid())
  userId      String   @unique
  categoryId  String?   // optional, falls wir die Category tracken
  stepIndex   Int      @default(0)
  trackingActive Boolean?
  channelName String?   // Der Name, den der User eingibt
  chosenZoneId String?  // Die Zone, die ausgewählt wurde

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}