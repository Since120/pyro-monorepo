datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  username  String?
  email     String?   @unique
  createdAt DateTime @default(now())
}

// ==========================================
// NEU: Category (für Kategorien im Discord)
// ==========================================
model Category {
  id                  String   @id @default(cuid())

  // Name (so heißt die Kategorie im Discord)
  name                String

  // categoryType: z. B. "freelancers", "contractors", "employees"
  categoryType        String

  // Wer hat Zugang? (z. B. Discord-Rollen-IDs als String[], später ausbaubar)
  allowedRoles        String[] @default([])

  // Ob andere Member die Kategorie zumindest sehen
  isVisible           Boolean  @default(true)

  // Falls man die letzte Benutzung und Gesamtzeit cachen will:
  lastUsage           DateTime?
  totalSecondsInCateg Int      @default(0)

  // Timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt

  // Relation auf Zonen: Eine Kategorie kann mehrere Zonen enthalten
  zones               Zone[]
  discordCategoryId   String?

}




// ===========================
// Altes Modell: Zone
// JETZT: Relation auf Category
// ===========================
model Zone {
  id              String   @id @default(cuid())
  zoneKey         String   @unique        // NICHT löschen: Bot nutzt es
  zoneName        String
  minutesRequired Int      @default(60)
  pointsGranted   Int      @default(1)

  // NEUE Felder zum Anzeigen in UI:
  lastUsage           DateTime?
  totalSecondsInZone  Int      @default(0)

  // Relation auf Category (optional, damit altes System nicht bricht)
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  // Falls wir Stats auf Zone-Ebene zuordnen
  userStats  UserZoneStats[]
}

// ===============================================================
// WEITERE UNVERÄNDERTE / LEICHT ANGERICHTE MODELLE
// (Sie bleiben weitgehend, damit altes System nicht bricht)
// ===============================================================


model SetupChannels {
  id              String   @id @default(cuid())
  categoryId      String
  textChannelId   String
  voiceChannelId  String
  createdAt       DateTime @default(now())
}

model DynamicVoiceChannel {
  id             String   @id @default(cuid())
  channelId      String   @unique
  zoneKey        String?
  createdByUser  String?
  createdAt      DateTime @default(now())
  allowedUsers   String[] @default([])
  blockedUsers   String[] @default([]) 
}

model UserTracking {
  id             String   @id @default(cuid())
  userId         String   @unique
  isTracked      Boolean  @default(false)
  createdAt      DateTime @default(now())
}

model RoleConfig {
  id        String  @id @default(cuid())
  roleKey   String
  roleId    String
  createdAt DateTime @default(now())

  @@unique([roleKey], map: "unique_roleKey")
}

model AdminSettings {
  id                  String   @id @default(cuid())
  voiceCategoryId     String?  // neu: optional, speichert CategoryChannel-ID
  // ... 
}

// ========================================
// UserZoneStats: zoneKey + NEU: zoneId
// ========================================
model UserZoneStats {
  id                 String   @id @default(cuid())
  userId             String

  // ALT: Bot-Code nutzt zoneKey
  zoneKey            String

  // NEU: Optionale Relation, damit wir schrittweise migrieren können
  zoneId             String?
  zone               Zone? @relation(fields: [zoneId], references: [id])

  totalSecondsInZone Int      @default(0)
  leftoverSeconds    Int      @default(0)
  pointsInThisZone   Int      @default(0)
  lastJoinTimestamp  DateTime?
  lastUsage          DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
}




model UserGlobalStats {
  id                  String   @id @default(cuid())
  userId              String   @unique
  totalPoints         Int      @default(0)
  totalTimeInAllZones Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt
}